//
// EventsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class EventsAPI {
    /**

     - parameter id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiEventsByIdDelete(id: Int32, completion: @escaping ((_ error: Error?) -> Void)) {
        apiEventsByIdDeleteWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     - DELETE /api/Events/{id}
     
     - parameter id: (path)  

     - returns: RequestBuilder<Void> 
     */
    open class func apiEventsByIdDeleteWithRequestBuilder(id: Int32) -> RequestBuilder<Void> {
        var path = "/api/Events/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiEventsByIdGet(id: Int32, completion: @escaping ((_ error: Error?) -> Void)) {
        apiEventsByIdGetWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     - GET /api/Events/{id}
     
     - parameter id: (path)  

     - returns: RequestBuilder<Void> 
     */
    open class func apiEventsByIdGetWithRequestBuilder(id: Int32) -> RequestBuilder<Void> {
        var path = "/api/Events/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter id: (path)  
     - parameter event: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiEventsByIdPut(id: Int32, event: Event? = nil, completion: @escaping ((_ error: Error?) -> Void)) {
        apiEventsByIdPutWithRequestBuilder(id: id, event: event).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     - PUT /api/Events/{id}
     
     - parameter id: (path)  
     - parameter event: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func apiEventsByIdPutWithRequestBuilder(id: Int32, event: Event? = nil) -> RequestBuilder<Void> {
        var path = "/api/Events/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: event)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiEventsGet(completion: @escaping ((_ data: [Event]?,_ error: Error?) -> Void)) {
        apiEventsGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     - GET /api/Events
     - examples: [{contentType=application/json, example=[ {
  "gameId" : 5,
  "creator" : {
    "firstName" : "aeiou",
    "lastName" : "aeiou",
    "joinedEvents" : [ {
      "eventId" : 6,
      "guest" : "",
      "event" : "",
      "guestId" : "aeiou"
    } ],
    "providerId" : "aeiou",
    "pictureUrl" : "aeiou",
    "fullName" : "aeiou",
    "bio" : "aeiou",
    "createdEvents" : [ "" ],
    "id" : "aeiou",
    "userName" : "aeiou",
    "email" : "aeiou",
    "providerName" : "aeiou"
  },
  "game" : {
    "numberOfPlayers" : 7,
    "imageUrl" : "aeiou",
    "gameDescription" : "aeiou",
    "id" : 2,
    "title" : "aeiou",
    "url" : "aeiou"
  },
  "eventGuests" : [ "" ],
  "latitude" : 0.14658129805029452,
  "locationDescription" : "aeiou",
  "title" : "aeiou",
  "eventDescription" : "aeiou",
  "host" : "aeiou",
  "startTime" : "2000-01-23T04:56:07.000+00:00",
  "id" : 0,
  "endTime" : "2000-01-23T04:56:07.000+00:00",
  "longitude" : 0.5962133916683182
} ]}]

     - returns: RequestBuilder<[Event]> 
     */
    open class func apiEventsGetWithRequestBuilder() -> RequestBuilder<[Event]> {
        let path = "/api/Events"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<[Event]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter event: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiEventsPost(event: Event? = nil, completion: @escaping ((_ error: Error?) -> Void)) {
        apiEventsPostWithRequestBuilder(event: event).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     - POST /api/Events
     
     - parameter event: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func apiEventsPostWithRequestBuilder(event: Event? = nil) -> RequestBuilder<Void> {
        let path = "/api/Events"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: event)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
